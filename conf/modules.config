/*
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Config file for defining DSL2 per module options and publishing paths
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Available keys to override module options:
        ext.args   = Additional arguments appended to command in module.
        ext.args2  = Second set of arguments appended to command in module (multi-tool modules).
        ext.args3  = Third set of arguments appended to command in module (multi-tool modules).
        ext.prefix = File name prefix for output files.
----------------------------------------------------------------------------------------
*/

process {

    publishDir = [
        path: { "${params.outdir}/${task.process.tokenize(':')[-1].tokenize('_')[0].toLowerCase()}" },
        mode: params.publish_dir_mode,
        saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
    ]

    // ----------------------
    // Ortholog finding
    // ----------------------

    withName: 'IDENTIFY_SEQ_ONLINE|WRITE_SEQINFO' {
        publishDir = [
            path: { "${params.outdir}/seqinfo" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
            enabled: params.output_intermediates
        ]
        errorStrategy = {task.exitStatus == 10 ? 'retry' : 'finish'}
        maxRetries = 3
    }

    withName: 'FETCH_OMA_GROUP_LOCAL|FETCH_OMA_GROUP_ONLINE' {
        publishDir = [
            path: { "${params.outdir}/orthologs/oma" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
            enabled: params.output_intermediates
        ]
        errorStrategy = {task.exitStatus == 10 ? 'retry' : 'finish'}
        maxRetries = 3
    }

    withName: 'FETCH_PANTHER_GROUP_LOCAL|FETCH_PANTHER_GROUP_ONLINE' {
        publishDir = [
            path: { "${params.outdir}/orthologs/panther" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
            enabled: params.output_intermediates
        ]
        errorStrategy = {task.exitStatus == 10 ? 'retry' : 'finish'}
        maxRetries = 3
    }

    withName: 'FETCH_INSPECTOR_GROUP_ONLINE' {
        publishDir = [
            path: { "${params.outdir}/orthologs/orthoinspector" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
            enabled: params.output_intermediates
        ]
        errorStrategy = {task.exitStatus == 10 ? 'retry' : 'finish'}
        maxRetries = 3
    }

    withName: 'FETCH_EGGNOG_GROUP_LOCAL|FETCH_EGGNOG_GROUP_ONLINE' {
        publishDir = [
            path: { "${params.outdir}/orthologs/eggnog" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
            enabled: params.output_intermediates
        ]
        errorStrategy = {task.exitStatus == 10 ? 'retry' : 'finish'}
        maxRetries = 3
    }

    withName: 'MERGE_CSV' {
        ext.args = '-f 1 --outer-join --na 0'
        publishDir = [
            path: { "${params.outdir}/orthologs/merge_csv" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
            enabled: params.output_intermediates
        ]
    }

    withName: 'MAKE_SCORE_TABLE' {
        publishDir = [
            path: { "${params.outdir}/orthologs/score_table" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: 'FILTER_HITS' {
        publishDir = [
            path: { "${params.outdir}/orthologs/filter_hits" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
            enabled: params.output_intermediates
        ]
    }

    withName: 'PLOT_ORTHOLOGS' {
        publishDir = [
            path: { "${params.outdir}/orthologs/plots" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: 'MAKE_HITS_TABLE' {
        publishDir = [
            path: { "${params.outdir}/orthologs/stats" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
            enabled: params.output_intermediates
        ]
    }

    withName: 'MERGE_HITS' {
        ext.args = "-u 0 -k"
        ext.prefix = "aggregated_hits"
        publishDir = [
            path: { "${params.outdir}/orthologs/stats" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: 'MAKE_STATS' {
        publishDir = [
            path: { "${params.outdir}/orthologs/stats" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
            enabled: params.output_intermediates
        ]
    }

    withName: 'MERGE_STATS' {
        ext.args = "-u NA"
        ext.prefix = "aggregated_stats"
        publishDir = [
            path: { "${params.outdir}/orthologs/stats" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    // ----------------------
    // Sequence alignment
    // ----------------------

    withName: 'FETCH_SEQUENCES_ONLINE' {
        publishDir = [
            path: { "${params.outdir}/alignment/sequences" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
        errorStrategy = {task.exitStatus == 10 ? 'retry' : 'finish'}
        maxRetries = 3
    }

    withName: 'FETCH_AFDB_STRUCTURES' {
        publishDir = [
            path: { "${params.outdir}/alignment/structures" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
        errorStrategy = {task.exitStatus == 10 ? 'retry' : 'finish'}
        maxRetries = 3
    }

    withName: 'FILTER_FASTA' {
        publishDir = [
            path: { "${params.outdir}/alignment/filter" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
            enabled: params.output_intermediates
        ]
    }

    withName: 'CREATE_TCOFFEETEMPLATE' {
        publishDir = [
            path: { "${params.outdir}/alignment/templates" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
            enabled: params.output_intermediates
        ]

    }

    withName: 'TCOFFEE_ALIGN|TCOFFEE_3DALIGN' {
        publishDir = [
            path: { "${params.outdir}/alignment/tcoffee" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    // ----------------------
    // Tree reconstruction
    // ----------------------

    withName: 'IQTREE' {
        ext.args = '-m TEST' + (params.iqtree_bootstrap > 0 ? ' -bb ' + params.iqtree_bootstrap : '')
        publishDir = [
            path: { "${params.outdir}/trees/iqtree" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: 'PLOT_IQTREE' {
        publishDir = [
            path: { "${params.outdir}/trees/plots" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: 'CONVERT_PHYLIP' {
        publishDir = [
            path: { "${params.outdir}/trees/phylip" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
            enabled: params.output_intermediates
        ]
    }

    withName: 'FASTME' {
        ext.args = '-p LG' + (params.fastme_bootstrap > 0 ? ' -b ' + params.fastme_bootstrap : '')
        publishDir = [
            path: { "${params.outdir}/trees/fastme" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: 'PLOT_FASTME' {
        publishDir = [
            path: { "${params.outdir}/trees/plots" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    // ----------------------
    // Report generation
    // ----------------------

    withName: 'DUMP_PARAMS' {
        publishDir = [
            path: { "${params.outdir}/report/params" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
            enabled: params.output_intermediates
        ]
    }

    withName: 'CONVERT_FASTA' {
        publishDir = [
            path: { "${params.outdir}/report/fasta" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
            enabled: params.output_intermediates
        ]
    }

    withName: 'MAKE_REPORT' {
        publishDir = [
            path: { "${params.outdir}/report" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

}
